// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package tcp

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type tcpconnlatEvent struct {
	SaddrV4 uint32
	SaddrV6 [16]uint8
	DaddrV4 uint32
	DaddrV6 [16]uint8
	Comm    [16]int8
	DeltaUs uint64
	TsUs    uint64
	Tgid    uint32
	Af      int32
	Lport   uint16
	Dport   uint16
	_       [4]byte
}

type tcpconnlatPiddata struct {
	Comm [16]int8
	Ts   uint64
	Tgid uint32
	_    [4]byte
}

type tcpconnlatTrafficKey struct {
	SaddrV4 uint32
	SaddrV6 [16]uint8
	DaddrV4 uint32
	DaddrV6 [16]uint8
	Pid     uint32
	Name    [16]int8
	Lport   uint16
	Dport   uint16
	Family  uint16
	_       [2]byte
}

type tcpconnlatTrafficValue struct {
	Rx uint64
	Tx uint64
}

// loadTcpconnlat returns the embedded CollectionSpec for tcpconnlat.
func loadTcpconnlat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcpconnlatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tcpconnlat: %w", err)
	}

	return spec, err
}

// loadTcpconnlatObjects loads tcpconnlat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tcpconnlatObjects
//	*tcpconnlatPrograms
//	*tcpconnlatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcpconnlatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTcpconnlat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcpconnlatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpconnlatSpecs struct {
	tcpconnlatProgramSpecs
	tcpconnlatMapSpecs
	tcpconnlatVariableSpecs
}

// tcpconnlatProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpconnlatProgramSpecs struct {
	FentryTcpCleanupRbuf     *ebpf.ProgramSpec `ebpf:"fentry_tcp_cleanup_rbuf"`
	FentryTcpRcvStateProcess *ebpf.ProgramSpec `ebpf:"fentry_tcp_rcv_state_process"`
	FentryTcpSendmsg         *ebpf.ProgramSpec `ebpf:"fentry_tcp_sendmsg"`
	FentryTcpV4Connect       *ebpf.ProgramSpec `ebpf:"fentry_tcp_v4_connect"`
	FentryTcpV6Connect       *ebpf.ProgramSpec `ebpf:"fentry_tcp_v6_connect"`
	TcpDestroySock           *ebpf.ProgramSpec `ebpf:"tcp_destroy_sock"`
}

// tcpconnlatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpconnlatMapSpecs struct {
	Events     *ebpf.MapSpec `ebpf:"events"`
	Start      *ebpf.MapSpec `ebpf:"start"`
	TrafficMap *ebpf.MapSpec `ebpf:"traffic_map"`
}

// tcpconnlatVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpconnlatVariableSpecs struct {
	TargMinUs *ebpf.VariableSpec `ebpf:"targ_min_us"`
	TargTgid  *ebpf.VariableSpec `ebpf:"targ_tgid"`
}

// tcpconnlatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcpconnlatObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpconnlatObjects struct {
	tcpconnlatPrograms
	tcpconnlatMaps
	tcpconnlatVariables
}

func (o *tcpconnlatObjects) Close() error {
	return _TcpconnlatClose(
		&o.tcpconnlatPrograms,
		&o.tcpconnlatMaps,
	)
}

// tcpconnlatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcpconnlatObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpconnlatMaps struct {
	Events     *ebpf.Map `ebpf:"events"`
	Start      *ebpf.Map `ebpf:"start"`
	TrafficMap *ebpf.Map `ebpf:"traffic_map"`
}

func (m *tcpconnlatMaps) Close() error {
	return _TcpconnlatClose(
		m.Events,
		m.Start,
		m.TrafficMap,
	)
}

// tcpconnlatVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTcpconnlatObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpconnlatVariables struct {
	TargMinUs *ebpf.Variable `ebpf:"targ_min_us"`
	TargTgid  *ebpf.Variable `ebpf:"targ_tgid"`
}

// tcpconnlatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcpconnlatObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpconnlatPrograms struct {
	FentryTcpCleanupRbuf     *ebpf.Program `ebpf:"fentry_tcp_cleanup_rbuf"`
	FentryTcpRcvStateProcess *ebpf.Program `ebpf:"fentry_tcp_rcv_state_process"`
	FentryTcpSendmsg         *ebpf.Program `ebpf:"fentry_tcp_sendmsg"`
	FentryTcpV4Connect       *ebpf.Program `ebpf:"fentry_tcp_v4_connect"`
	FentryTcpV6Connect       *ebpf.Program `ebpf:"fentry_tcp_v6_connect"`
	TcpDestroySock           *ebpf.Program `ebpf:"tcp_destroy_sock"`
}

func (p *tcpconnlatPrograms) Close() error {
	return _TcpconnlatClose(
		p.FentryTcpCleanupRbuf,
		p.FentryTcpRcvStateProcess,
		p.FentryTcpSendmsg,
		p.FentryTcpV4Connect,
		p.FentryTcpV6Connect,
		p.TcpDestroySock,
	)
}

func _TcpconnlatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcpconnlat_bpfeb.o
var _TcpconnlatBytes []byte
