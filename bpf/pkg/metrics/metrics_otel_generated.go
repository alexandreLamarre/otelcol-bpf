// Package metrics is auto-generated by metricsgen. DO NOT EDIT.
package metrics

import (
	"context"
	prommodel "github.com/prometheus/common/model"
	otelattribute "go.opentelemetry.io/otel/attribute"
	otelmetricsdk "go.opentelemetry.io/otel/metric"
)

// FIXME:hack for conformance tests, consistent metric exposing with prometheus driver
func init() {
	prommodel.NameValidationScheme = prommodel.LegacyValidation
}

type Metrics struct {
	*MetricBpfTcpConnlatency
	*MetricBpfTcpRx
	*MetricBpfTcpTx
}

// NewMetrics initializes the set of following metrics
// - BpfTcpConnlatency  : TCP connection latency
// - BpfTcpRx  : TCP received bytes
// - BpfTcpTx  : TCP transmitted bytes
func NewMetrics(meter otelmetricsdk.Meter) (Metrics, error) {
	m := Metrics{
		MetricBpfTcpConnlatency: &MetricBpfTcpConnlatency{},
		MetricBpfTcpRx:          &MetricBpfTcpRx{},
		MetricBpfTcpTx:          &MetricBpfTcpTx{},
	}
	if err := m.MetricBpfTcpConnlatency.init(meter); err != nil {
		return m, err
	}
	if err := m.MetricBpfTcpRx.init(meter); err != nil {
		return m, err
	}
	if err := m.MetricBpfTcpTx.init(meter); err != nil {
		return m, err
	}
	return m, nil
}

// MetricBpfTcpConnlatency TCP connection latency
type MetricBpfTcpConnlatency struct {
	data otelmetricsdk.Float64Histogram
}

func (m *MetricBpfTcpConnlatency) init(meter otelmetricsdk.Meter) error {
	var err error
	m.data, err = meter.Float64Histogram(
		"bpf.tcp.connlatency",
		otelmetricsdk.WithDescription("TCP connection latency"),
		otelmetricsdk.WithUnit("ms"),
		otelmetricsdk.WithExplicitBucketBoundaries(0, 100, 250, 500, 750, 1000, 2000, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1e+06, 2e+06, 5e+06, 1e+07, 2e+07, 5e+07, 1e+08, 2e+08, 5e+08, 1e+09),
	)
	return err
}

// Record records a data point for the specified metric
//
// • pidTgid : Thread group ID of the process.
// • pidComm : Name of the process.
// • netSaddr : Source address of the network packet.
// • netDaddr : Destination address of the network packet.
// • netAf : Address family of the network packet.
func (m *MetricBpfTcpConnlatency) Record(
	ctx context.Context,
	value float64,
	pidTgid int64,
	pidComm string,
	netSaddr string,
	netDaddr string,
	netAf string,
	attributeOpts ...AttributeBpfTcpConnlatencyOption,
) {
	options := &AttributeBpfTcpConnlatencyOptions{}
	options.Apply(attributeOpts...)
	optionalAttr := options.Attributes()
	requiredAttrs := []otelattribute.KeyValue{
		otelattribute.Int64("pid.tgid", pidTgid),
		otelattribute.String("pid.comm", pidComm),
		otelattribute.String("net.saddr", netSaddr),
		otelattribute.String("net.daddr", netDaddr),
		otelattribute.String("net.af", netAf),
	}

	attrs := otelattribute.NewSet(
		append(requiredAttrs, optionalAttr...)...,
	)
	m.data.Record(ctx, value, otelmetricsdk.WithAttributeSet(attrs))
}

type AttributeBpfTcpConnlatencyOptions struct {
}

type AttributeBpfTcpConnlatencyOption func(*AttributeBpfTcpConnlatencyOptions)

func (o *AttributeBpfTcpConnlatencyOptions) Apply(opts ...AttributeBpfTcpConnlatencyOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeBpfTcpConnlatencyOptions) Attributes() []otelattribute.KeyValue {
	ret := []otelattribute.KeyValue{}
	return ret
}

// MetricBpfTcpRx TCP received bytes
type MetricBpfTcpRx struct {
	data otelmetricsdk.Int64Counter
}

func (m *MetricBpfTcpRx) init(meter otelmetricsdk.Meter) error {
	var err error
	m.data, err = meter.Int64Counter(
		"bpf.tcp.rx",
		otelmetricsdk.WithDescription("TCP received bytes"),
		otelmetricsdk.WithUnit("By"),
	)
	return err
}

// Record records a data point for the specified metric
//
// • pidId : Process ID.
// • pidComm : Name of the process.
// • netSaddr : Source address of the network packet.
// • netDaddr : Destination address of the network packet.
func (m *MetricBpfTcpRx) Record(
	ctx context.Context,
	value int64,
	pidId int64,
	pidComm string,
	netSaddr string,
	netDaddr string,
	attributeOpts ...AttributeBpfTcpRxOption,
) {
	options := &AttributeBpfTcpRxOptions{}
	options.Apply(attributeOpts...)
	optionalAttr := options.Attributes()
	requiredAttrs := []otelattribute.KeyValue{
		otelattribute.Int64("pid.id", pidId),
		otelattribute.String("pid.comm", pidComm),
		otelattribute.String("net.saddr", netSaddr),
		otelattribute.String("net.daddr", netDaddr),
	}

	attrs := otelattribute.NewSet(
		append(requiredAttrs, optionalAttr...)...,
	)
	m.data.Add(ctx, value, otelmetricsdk.WithAttributeSet(attrs))
}

type AttributeBpfTcpRxOptions struct {
}

type AttributeBpfTcpRxOption func(*AttributeBpfTcpRxOptions)

func (o *AttributeBpfTcpRxOptions) Apply(opts ...AttributeBpfTcpRxOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeBpfTcpRxOptions) Attributes() []otelattribute.KeyValue {
	ret := []otelattribute.KeyValue{}
	return ret
}

// MetricBpfTcpTx TCP transmitted bytes
type MetricBpfTcpTx struct {
	data otelmetricsdk.Int64Counter
}

func (m *MetricBpfTcpTx) init(meter otelmetricsdk.Meter) error {
	var err error
	m.data, err = meter.Int64Counter(
		"bpf.tcp.tx",
		otelmetricsdk.WithDescription("TCP transmitted bytes"),
		otelmetricsdk.WithUnit("By"),
	)
	return err
}

// Record records a data point for the specified metric
//
// • pidId : Process ID.
// • pidComm : Name of the process.
// • netSaddr : Source address of the network packet.
// • netDaddr : Destination address of the network packet.
func (m *MetricBpfTcpTx) Record(
	ctx context.Context,
	value int64,
	pidId int64,
	pidComm string,
	netSaddr string,
	netDaddr string,
	attributeOpts ...AttributeBpfTcpTxOption,
) {
	options := &AttributeBpfTcpTxOptions{}
	options.Apply(attributeOpts...)
	optionalAttr := options.Attributes()
	requiredAttrs := []otelattribute.KeyValue{
		otelattribute.Int64("pid.id", pidId),
		otelattribute.String("pid.comm", pidComm),
		otelattribute.String("net.saddr", netSaddr),
		otelattribute.String("net.daddr", netDaddr),
	}

	attrs := otelattribute.NewSet(
		append(requiredAttrs, optionalAttr...)...,
	)
	m.data.Add(ctx, value, otelmetricsdk.WithAttributeSet(attrs))
}

type AttributeBpfTcpTxOptions struct {
}

type AttributeBpfTcpTxOption func(*AttributeBpfTcpTxOptions)

func (o *AttributeBpfTcpTxOptions) Apply(opts ...AttributeBpfTcpTxOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeBpfTcpTxOptions) Attributes() []otelattribute.KeyValue {
	ret := []otelattribute.KeyValue{}
	return ret
}
