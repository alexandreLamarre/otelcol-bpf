// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type procexecEvent struct {
	Pid       int32
	Ppid      int32
	Uid       uint32
	Retval    int32
	ArgsCount int32
	ArgsSize  uint32
	StartTime uint64
	Elapsed   uint64
	Comm      [16]int8
	Args      [7680]int8
}

// loadProcexec returns the embedded CollectionSpec for procexec.
func loadProcexec() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ProcexecBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load procexec: %w", err)
	}

	return spec, err
}

// loadProcexecObjects loads procexec and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*procexecObjects
//	*procexecPrograms
//	*procexecMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadProcexecObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadProcexec()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// procexecSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type procexecSpecs struct {
	procexecProgramSpecs
	procexecMapSpecs
	procexecVariableSpecs
}

// procexecProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type procexecProgramSpecs struct {
	SchedSchedProcessExec *ebpf.ProgramSpec `ebpf:"sched_sched_process_exec"`
	SchedSchedProcessExit *ebpf.ProgramSpec `ebpf:"sched_sched_process_exit"`
}

// procexecMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type procexecMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
	Execs  *ebpf.MapSpec `ebpf:"execs"`
}

// procexecVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type procexecVariableSpecs struct {
}

// procexecObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadProcexecObjects or ebpf.CollectionSpec.LoadAndAssign.
type procexecObjects struct {
	procexecPrograms
	procexecMaps
	procexecVariables
}

func (o *procexecObjects) Close() error {
	return _ProcexecClose(
		&o.procexecPrograms,
		&o.procexecMaps,
	)
}

// procexecMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadProcexecObjects or ebpf.CollectionSpec.LoadAndAssign.
type procexecMaps struct {
	Events *ebpf.Map `ebpf:"events"`
	Execs  *ebpf.Map `ebpf:"execs"`
}

func (m *procexecMaps) Close() error {
	return _ProcexecClose(
		m.Events,
		m.Execs,
	)
}

// procexecVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadProcexecObjects or ebpf.CollectionSpec.LoadAndAssign.
type procexecVariables struct {
}

// procexecPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadProcexecObjects or ebpf.CollectionSpec.LoadAndAssign.
type procexecPrograms struct {
	SchedSchedProcessExec *ebpf.Program `ebpf:"sched_sched_process_exec"`
	SchedSchedProcessExit *ebpf.Program `ebpf:"sched_sched_process_exit"`
}

func (p *procexecPrograms) Close() error {
	return _ProcexecClose(
		p.SchedSchedProcessExec,
		p.SchedSchedProcessExit,
	)
}

func _ProcexecClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed procexec_bpfeb.o
var _ProcexecBytes []byte
